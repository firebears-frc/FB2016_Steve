// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Chassis extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX frontleft;
    private WPI_TalonSRX backleft;
    private MotorControllerGroup leftMotors;
    private WPI_TalonSRX frontright;
    private WPI_TalonSRX backright;
    private MotorControllerGroup rightMotors;
    private DifferentialDrive differentialDrive;
    private Encoder encoderLeft;
    private Encoder encoderRight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
    *
    */
    public Chassis() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        frontleft = new WPI_TalonSRX(2);

        backleft = new WPI_TalonSRX(3);

        leftMotors = new MotorControllerGroup(frontleft, backleft);
        addChild("leftMotors", leftMotors);

        frontright = new WPI_TalonSRX(4);

        backright = new WPI_TalonSRX(5);

        rightMotors = new MotorControllerGroup(frontright, backright);
        addChild("rightMotors", rightMotors);

        differentialDrive = new DifferentialDrive(leftMotors, rightMotors);
        addChild("differentialDrive", differentialDrive);
        differentialDrive.setSafetyEnabled(true);
        differentialDrive.setExpiration(0.1);
        differentialDrive.setMaxOutput(1.0);

        encoderLeft = new Encoder(2, 3, false, EncodingType.k4X);
        addChild("encoderLeft", encoderLeft);
        encoderLeft.setDistancePerPulse(0.05639 / 39.3701);
        // encoderLeft.setPIDSourceType(PIDSourceType.kRate);

        encoderRight = new Encoder(4, 5, false, EncodingType.k4X);
        addChild("encoderRight", encoderRight);
        encoderRight.setDistancePerPulse(0.05639 / 39.3701);
        // encoderRight.setPIDSourceType(PIDSourceType.kRate);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void arcadeDrive(double speed, double rotaiton) {

        differentialDrive.arcadeDrive(rotaiton, speed * -1);
    }

    public double getLeftDistance() {
        return encoderLeft.getDistance();
    }

    public double getRightDistance() {
        return encoderRight.getDistance();
    }
}
